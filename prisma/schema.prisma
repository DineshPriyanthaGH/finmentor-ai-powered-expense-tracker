generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String            @id @default(uuid())
  clerkUserId   String            @unique // clerk user id
  email         String            @unique
  name          String?
  imageUrl      String?
  transactions  Transaction[]
  accounts      Account[]
  budgets       Budget[]
  notifications Notification[]
  emailPreference EmailPreference?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         String        // "CURRENT" or "SAVINGS"
  balance      Decimal       @default(0) // will ask inital balance while creating an account
  isDefault    Boolean       @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String    @id @default(uuid())
  type              String    // "INCOME" or "EXPENSE"
  amount            Decimal
  description       String?
  date              DateTime
  category          String           
  receiptUrl        String?
  isRecurring       Boolean   @default(false)
  recurringInterval String?   // "DAILY", "WEEKLY", "MONTHLY", "YEARLY" - Only used if isRecurring is true
  nextRecurringDate DateTime? // Next date for recurring transaction
  lastProcessed     DateTime? // Last time this recurring transaction was processed
  status            String    @default("COMPLETED") // "PENDING", "COMPLETED", "FAILED"
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}


model Budget {
  id          String       @id @default(uuid())
  amount      Decimal
  lastAlertSent DateTime?  // Track when the last alert was sent
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("budgets")
}

model Notification {
  id          String    @id @default(uuid())
  type        String    // "BUDGET_ALERT", "MONTHLY_REPORT", "TRANSACTION_REMINDER", "GOAL_ACHIEVED"
  title       String
  message     String
  isRead      Boolean   @default(false)
  isEmailed   Boolean   @default(false)
  priority    String    @default("NORMAL") // "LOW", "NORMAL", "HIGH", "CRITICAL"
  actionUrl   String?   // Optional URL for action button
  metadata    String?   // JSON string for additional data
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model EmailPreference {
  id                    String    @id @default(uuid())
  userId                String    @unique
  budgetAlerts          Boolean   @default(true)
  monthlyReports        Boolean   @default(true)
  transactionReminders  Boolean   @default(false)
  goalAchievements      Boolean   @default(true)
  weeklyDigest          Boolean   @default(false)
  emailFrequency        String    @default("IMMEDIATE") // "IMMEDIATE", "DAILY", "WEEKLY"
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([userId])
  @@map("email_preferences")
}

// Note: SQLite doesn't support enums, so we use String with validation in code
// enum TransactionType {
//   INCOME
//   EXPENSE
// }

// enum AccountType {
//   CURRENT
//   SAVINGS
// }

// enum TransactionStatus {
//   PENDING
//   COMPLETED
//   FAILED
// }

// enum RecurringInterval {
//   DAILY
//   WEEKLY
//   MONTHLY
//   YEARLY
// }